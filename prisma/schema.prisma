datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum UserRole {
  ADMIN
  USER
}

enum ApplicationStep {
  STEP_1
  STEP_2
  STEP_3
  STEP_4
}

model User {
  id            String  @id @default(cuid())
  applicationId String? @unique

  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          UserRole  @default(USER)
  accounts      Account[]

  application Application? @relation(fields: [applicationId], references: [id])
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model VerificationToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model Application {
  id String @id @default(cuid())

  applicationStep ApplicationStep @default(STEP_1)
  feedback        String?

  name                   String?
  dateOfBirth            String?
  phoneNumber            String?
  email                  String?
  emergencyContactName   String?
  emergencyContactEmail  String?
  emergencyContactNumber String?
  nationalIdCard         String?
  passport               String?
  nursingLicense         String?
  nursingDegree          String?
  highSchoolDiploma      String?
  highSchoolGrades       String?
  curriculumVitae        String?

  nationalId                   String?
  passportPhoto                String?
  passportId                   String?
  nursingSchoolDiploma         String?
  nursingSchoolTranscript      String?
  nursingExperienceCertificate String?

  toeflExamResult     String?
  usNursingEvaluation String?
  usCgfnsCertificate  String?
  usVisaScreen        String?
  usJobOffer          String?

  usSocialSecurityCard String?
  usGreenCard          String?
  birthCertificate     String?
  spouseDetails        SpouseDetail[]
  childrenDetails      ChildrenDetail[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  User      User?
}

model SpouseDetail {
  id                     String  @id @default(cuid())
  applicationId          String
  spouseDemographics     String?
  spouseBirthCertificate String?
  spousePassport         String?
  spousePassportPhoto    String?
  marriageCertificate    String?

  application Application @relation(fields: [applicationId], references: [id])
}

model ChildrenDetail {
  id                 String  @id @default(cuid())
  applicationId      String
  birthCertificate   String?
  passportPhoto      String?
  immunizationRecord String?

  application Application @relation(fields: [applicationId], references: [id])
}
